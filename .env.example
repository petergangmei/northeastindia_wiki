# Django Configuration
DJANGO_SECRET_KEY=your-secret-key-here

# Database Configuration
DATABASE_URL_PROD=postgres://username:password@host:port/database_name
# Alternative individual database settings (fallback)
DB_NAME=your_database_name
DB_USER=your_database_user
DB_PASSWORD=your_database_password
DB_HOST=localhost
DB_PORT=5432

# AWS S3 Configuration for Static Files (Private Bucket)
# Get these from your AWS account - IAM user with S3 permissions
AWS_ACCESS_KEY_ID=your-aws-access-key-id
AWS_SECRET_ACCESS_KEY=your-aws-secret-access-key

# S3 Bucket Configuration (Private Bucket with Signed URLs)
AWS_STORAGE_BUCKET_NAME=your-s3-bucket-name
AWS_S3_REGION_NAME=us-east-1

# Signed URL Configuration for Private Bucket
# Time in seconds that signed URLs remain valid (default: 3600 = 1 hour)
AWS_QUERYSTRING_EXPIRE=3600

# Email Configuration
EMAIL_HOST=smtp.example.com
EMAIL_PORT=587
EMAIL_HOST_USER=your-email@example.com
EMAIL_HOST_PASSWORD=your-email-password
DEFAULT_FROM_EMAIL=noreply@northeastindia.wiki

# Instructions for Private S3 Bucket Setup:
# 1. Create a PRIVATE S3 bucket in your AWS account (no public access)
# 2. Create an IAM user with S3 permissions (AmazonS3FullAccess or custom policy)
# 3. Generate access keys for the IAM user
# 4. DO NOT set bucket policy for public access - keep bucket private
# 5. Static files will be served via signed URLs with authentication
# 6. Signed URLs expire after AWS_QUERYSTRING_EXPIRE seconds (default 1 hour)
# 7. Copy this file to .env and fill in your actual values
#
# Note: Private buckets with signed URLs provide better security but:
# - Each static file request generates a new signed URL
# - URLs expire and need regeneration
# - Cannot use custom domains with signed URLs
# - May have slight performance impact compared to public buckets