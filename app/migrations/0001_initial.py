# Generated by Django 5.1.7 on 2025-03-25 08:51

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(max_length=120, unique=True)),
                ('description', models.TextField()),
                ('capital', models.CharField(max_length=100)),
                ('formation_date', models.DateField(blank=True, null=True)),
                ('population', models.PositiveIntegerField(blank=True, null=True)),
                ('area', models.PositiveIntegerField(blank=True, help_text='Area in square kilometers', null=True)),
                ('languages', models.CharField(blank=True, help_text='Comma-separated list of major languages', max_length=255)),
                ('image', models.ImageField(blank=True, null=True, upload_to='states/')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=50)),
                ('slug', models.SlugField(max_length=60, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('slug', models.SlugField(max_length=280, unique=True)),
                ('content', models.TextField()),
                ('excerpt', models.TextField(blank=True, help_text='A short summary of the content')),
                ('published', models.BooleanField(default=False)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('meta_description', models.CharField(blank=True, help_text='SEO meta description', max_length=160)),
                ('featured_image', models.ImageField(blank=True, null=True, upload_to='content/')),
                ('review_status', models.CharField(choices=[('draft', 'Draft'), ('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('featured', 'Featured')], default='draft', max_length=20)),
                ('review_notes', models.TextField(blank=True)),
                ('references', models.TextField(blank=True, help_text='Sources and references')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_items', to=settings.AUTH_USER_MODEL)),
                ('last_edited_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='edited_articles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-published_at', '-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ArticleRevision',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('content', models.TextField()),
                ('comment', models.CharField(blank=True, help_text='Brief explanation of the changes', max_length=255)),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='revisions', to='app.article')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='article_revisions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(max_length=120, unique=True)),
                ('description', models.TextField(blank=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='app.category')),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='article',
            name='categories',
            field=models.ManyToManyField(blank=True, related_name='%(class)s_items', to='app.category'),
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('content_type', models.CharField(choices=[('article', 'Article'), ('personality', 'Personality'), ('cultural', 'Cultural Element')], max_length=20)),
                ('object_id', models.PositiveIntegerField()),
                ('comment', models.TextField()),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='app.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Contribution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('contribution_type', models.CharField(choices=[('article_create', 'Created Article'), ('article_edit', 'Edited Article'), ('personality_create', 'Created Personality'), ('personality_edit', 'Edited Personality'), ('cultural_create', 'Created Cultural Element'), ('cultural_edit', 'Edited Cultural Element'), ('media_upload', 'Uploaded Media'), ('comment', 'Posted Comment')], max_length=30)),
                ('content_type', models.CharField(blank=True, max_length=20)),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('points_earned', models.IntegerField(default=0)),
                ('approved', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contributions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MediaItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('file', models.FileField(blank=True, null=True, upload_to='media/')),
                ('external_url', models.URLField(blank=True, null=True)),
                ('media_type', models.CharField(choices=[('image', 'Image'), ('video', 'Video'), ('audio', 'Audio'), ('document', 'Document'), ('other', 'Other')], default='image', max_length=20)),
                ('creator', models.CharField(blank=True, help_text='Original creator or owner of the media', max_length=255)),
                ('source', models.CharField(blank=True, help_text='Source of the media', max_length=255)),
                ('license', models.CharField(blank=True, help_text='License type, e.g., CC BY-SA 4.0', max_length=100)),
                ('uploader', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='media_items', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notification_type', models.CharField(choices=[('comment', 'New Comment'), ('review', 'Content Review'), ('approval', 'Content Approved'), ('rejection', 'Content Rejected'), ('mention', 'User Mention'), ('system', 'System Notification')], max_length=20)),
                ('content_type', models.CharField(blank=True, max_length=20)),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('message', models.TextField()),
                ('read', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='article',
            name='states',
            field=models.ManyToManyField(blank=True, related_name='%(class)s_items', to='app.state'),
        ),
        migrations.CreateModel(
            name='Personality',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('slug', models.SlugField(max_length=280, unique=True)),
                ('content', models.TextField()),
                ('excerpt', models.TextField(blank=True, help_text='A short summary of the content')),
                ('published', models.BooleanField(default=False)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('meta_description', models.CharField(blank=True, help_text='SEO meta description', max_length=160)),
                ('featured_image', models.ImageField(blank=True, null=True, upload_to='content/')),
                ('review_status', models.CharField(choices=[('draft', 'Draft'), ('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('featured', 'Featured')], default='draft', max_length=20)),
                ('review_notes', models.TextField(blank=True)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('death_date', models.DateField(blank=True, null=True)),
                ('birth_place', models.CharField(blank=True, max_length=255)),
                ('notable_works', models.TextField(blank=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_items', to=settings.AUTH_USER_MODEL)),
                ('categories', models.ManyToManyField(blank=True, related_name='%(class)s_items', to='app.category')),
                ('states', models.ManyToManyField(blank=True, related_name='%(class)s_items', to='app.state')),
                ('tags', models.ManyToManyField(blank=True, related_name='%(class)s_items', to='app.tag')),
            ],
            options={
                'verbose_name_plural': 'Personalities',
            },
        ),
        migrations.CreateModel(
            name='CulturalElement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('slug', models.SlugField(max_length=280, unique=True)),
                ('content', models.TextField()),
                ('excerpt', models.TextField(blank=True, help_text='A short summary of the content')),
                ('published', models.BooleanField(default=False)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('meta_description', models.CharField(blank=True, help_text='SEO meta description', max_length=160)),
                ('featured_image', models.ImageField(blank=True, null=True, upload_to='content/')),
                ('review_status', models.CharField(choices=[('draft', 'Draft'), ('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('featured', 'Featured')], default='draft', max_length=20)),
                ('review_notes', models.TextField(blank=True)),
                ('element_type', models.CharField(choices=[('festival', 'Festival'), ('tradition', 'Tradition'), ('art_form', 'Art Form'), ('craft', 'Craft'), ('cuisine', 'Cuisine'), ('attire', 'Traditional Attire'), ('music', 'Music'), ('dance', 'Dance'), ('language', 'Language'), ('other', 'Other')], max_length=50)),
                ('seasonal', models.BooleanField(default=False, help_text='Is this element seasonal or periodic?')),
                ('season_or_period', models.CharField(blank=True, help_text='If seasonal, specify when it occurs', max_length=100)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_items', to=settings.AUTH_USER_MODEL)),
                ('categories', models.ManyToManyField(blank=True, related_name='%(class)s_items', to='app.category')),
                ('states', models.ManyToManyField(blank=True, related_name='%(class)s_items', to='app.state')),
                ('tags', models.ManyToManyField(blank=True, related_name='%(class)s_items', to='app.tag')),
            ],
            options={
                'ordering': ['-published_at', '-created_at'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='article',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='%(class)s_items', to='app.tag'),
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('location', models.CharField(blank=True, max_length=100)),
                ('website', models.URLField(blank=True)),
                ('role', models.CharField(choices=[('viewer', 'Viewer'), ('contributor', 'Contributor'), ('editor', 'Editor'), ('admin', 'Administrator')], default='viewer', max_length=20)),
                ('reputation_points', models.IntegerField(default=0)),
                ('contribution_count', models.IntegerField(default=0)),
                ('email_notifications', models.BooleanField(default=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
